"""create eventoutbox table

Revision ID: f9986c665403
Revises: 5b5ff7275c09
Create Date: 2025-10-06 16:34:58.705488

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f9986c665403'
down_revision: Union[str, None] = '5b5ff7275c09'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('eventoutbox',
    sa.Column('event_type', sa.String(length=64), nullable=False),
    sa.Column('subject_type', sa.String(length=32), nullable=False),
    sa.Column('subject_id', sa.String(length=64), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('occurred_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('status', sa.String(length=16), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('next_attempt_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('org_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_eventoutbox_created_at'), 'eventoutbox', ['created_at'], unique=False)
    op.create_index(op.f('ix_eventoutbox_updated_at'), 'eventoutbox', ['updated_at'], unique=False)
    op.create_table('webhooksubscription',
    sa.Column('endpoint_url', sa.String(length=300), nullable=False),
    sa.Column('secret', sa.String(length=120), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('filters', sa.JSON(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('org_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_webhooksubscription_created_at'), 'webhooksubscription', ['created_at'], unique=False)
    op.create_index(op.f('ix_webhooksubscription_updated_at'), 'webhooksubscription', ['updated_at'], unique=False)
    op.drop_index('textchunk_embedding_idx', table_name='textchunk', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_index('textchunk_fts_idx', table_name='textchunk', postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('textchunk_fts_idx', 'textchunk', [sa.text("to_tsvector('simple'::regconfig, text)")], unique=False, postgresql_using='gin')
    op.create_index('textchunk_embedding_idx', 'textchunk', ['embedding'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_index(op.f('ix_webhooksubscription_updated_at'), table_name='webhooksubscription')
    op.drop_index(op.f('ix_webhooksubscription_created_at'), table_name='webhooksubscription')
    op.drop_table('webhooksubscription')
    op.drop_index(op.f('ix_eventoutbox_updated_at'), table_name='eventoutbox')
    op.drop_index(op.f('ix_eventoutbox_created_at'), table_name='eventoutbox')
    op.drop_table('eventoutbox')
    # ### end Alembic commands ###
